//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


/*

using System;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Net;
using System.IO;
using System.Security.Cryptography;



public class ConnectionUtility
{
	enum RequestType {POST, GET};
	
	private static String DEFAULT_URL = "http://obscure-temple-1449.herokuapp.com";

	private static UTF8Encoding utf8encode = new UTF8Encoding();
	private static HMACSHA256 hmac;
	private static Boolean hmacInit = false;

	private String serverUrl;

	public ConnectionUtility(){
		serverUrl = DEFAULT_URL;
	}

	public ConnectionUtility( String serverUrl ){
		this.serverUrl = serverUrl;
	}
	
	public HttpWebResponse Get( String path, ServerRequest sjc )
	{
		return webRequest (RequestType.GET, path, sjc);
	}

	public HttpWebResponse Post( String path, ServerRequest sjc )
	{
		return webRequest (RequestType.POST, path, sjc);
	}



	//This does all the work
	private HttpWebResponse webRequest( RequestType rt, String path, ServerRequest sjc )
	{
		Byte[] jsonString = utf8encode.GetBytes ( sjc.ToString ());
		String url = serverUrl + path;
		//Put required parameters in URL for GET requests
		if (rt == RequestType.GET) 
		{
			url += "?access=" + sjc.access + "&expires=" + sjc.expires;
		}
		WebRequest req = WebRequest.Create (url);
		req.Method = (rt == RequestType.POST) ? "POST" : "GET"; 
		req.Headers.Add ("X-signature", ConnectionUtility.getXSignature (jsonString));
		if( rt == RequestType.POST )
		{
			req.ContentType = "application/json";
			req.ContentLength = jsonString.Length;
			req.GetRequestStream().Write (jsonString, 0, jsonString.Length);
			req.GetRequestStream().Close ();
		} else {
			req.ContentType = "application/x-www-form-urlencoded";
		}

		return (HttpWebResponse)(req.GetResponse ());
	}

	//turns a HttpResponse into raw text
	public static String ResponseToString( HttpWebResponse resp )
	{
		StreamReader reader = new StreamReader (resp.GetResponseStream ());
		String result = reader.ReadToEnd ();
		reader.Close ();
		resp.Close ();
		return result;
	}
	

	//type T must be a DataContract object that corresponds to jsonString output
	public static T JsonDeserialize<T>( String jsonString )
	{
		DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(T));
		MemoryStream stream = new MemoryStream ();
		StreamWriter writer = new StreamWriter (stream);
		writer.Write (jsonString);
		writer.Flush ();
		stream.Position = 0;
		T deserialized = (T)ser.ReadObject (stream);
		return deserialized;
	}

	private static void initHmac()
	{
		hmac = new HMACSHA256 (utf8encode.GetBytes ("1424a6f0-603f-11e4-9803-0800200c9a66"));
		hmacInit = true;
	}

	//Gets hash of parameters (parameters are always HMAC as json regardless of GET/POST)
	private static String getXSignature( Byte[] jsonBytes ){
		//check if we need to set up the hash machine
		if (!hmacInit)
		{
			initHmac ();
		}

		return System.Convert.ToBase64String (hmac.ComputeHash (jsonBytes));
	}
}


*/